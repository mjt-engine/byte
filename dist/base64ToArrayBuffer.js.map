{"version":3,"file":"base64ToArrayBuffer.js","sourceRoot":"","sources":["../src/base64ToArrayBuffer.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,KAAa,EAAe,EAAE;IAChE,2CAA2C;IAC3C,MAAM,YAAY,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5C,sEAAsE;IACtE,MAAM,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;IACnC,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC;IAErC,4EAA4E;IAC5E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QAChC,KAAK,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACxC,CAAC;IAED,gEAAgE;IAChE,OAAO,KAAK,CAAC,MAAM,CAAC;AACtB,CAAC,CAAC","sourcesContent":["export const base64ToArrayBuffer = (input: string): ArrayBuffer => {\n  // Decode base64 string to a binary string.\n  const binaryString = globalThis.atob(input);\n  // Create a new ArrayBuffer with the same length as the binary string.\n  const length = binaryString.length;\n  const bytes = new Uint8Array(length);\n\n  // Iterate over each character in the binary string and fill the Uint8Array.\n  for (let i = 0; i < length; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n\n  // The Uint8Array is backed by the ArrayBuffer, which we return.\n  return bytes.buffer;\n};\n"]}