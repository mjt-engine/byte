{"version":3,"file":"immediateToArrayBuffer.js","sourceRoot":"","sources":["../src/immediateToArrayBuffer.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAG5D,MAAM,CAAC,MAAM,sBAAsB,GAAG,CACpC,KAAwB,EACX,EAAE;IACf,IAAI,KAAK,YAAY,WAAW,EAAE,CAAC;QACjC,OAAO,KAAK,CAAC;IACf,CAAC;IACD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;QAC9B,MAAM,OAAO,GAAG,IAAI,WAAW,EAAE,CAAC;QAClC,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC;IACD,IAAI,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;QAC9B,OAAO,KAAK,CAAC,MAAM,CAAC;IACtB,CAAC;IACD,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;QACzB,OAAO,mBAAmB,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IACD,OAAO,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC","sourcesContent":["import type { ImmediateByteLike } from \"./type/ImmediateByteLike\";\nimport { arrayToFloat64Array } from \"./arrayToFloat64Array\";\n\n\nexport const immediateToArrayBuffer = (\n  bytes: ImmediateByteLike\n): ArrayBuffer => {\n  if (bytes instanceof ArrayBuffer) {\n    return bytes;\n  }\n  if (typeof bytes === \"string\") {\n    const encoder = new TextEncoder();\n    return encoder.encode(bytes);\n  }\n  if (ArrayBuffer.isView(bytes)) {\n    return bytes.buffer;\n  }\n  if (Array.isArray(bytes)) {\n    return arrayToFloat64Array(bytes);\n  }\n  return new ArrayBuffer(0);\n};\n"]}