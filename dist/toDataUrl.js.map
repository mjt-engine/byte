{"version":3,"file":"toDataUrl.js","sourceRoot":"","sources":["../src/toDataUrl.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAGlC,MAAM,CAAC,MAAM,SAAS,GAAG,KAAK,EAAE,KAAe,EAAmB,EAAE;IAClE,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;IAC3B,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;IAChC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,MAAM,QAAQ,GAAG,CAAC,MAA+C,EAAE,EAAE;YACnE,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,CAAC;gBAC/B,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC;YACzB,CAAC;YACD,OAAO,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;YACvB,OAAO,MAAM,CAAC,+BAA+B,CAAC,CAAC;QACjD,CAAC,CAAC;QACF,MAAM,CAAC,MAAM,GAAG,UAAU,CAAC;YACzB,QAAQ,CAAC,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC7B,CAAC,CAAC;QACF,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import { toBlob } from \"./toBlob\";\nimport type { ByteLike } from \"./type/ByteLike\";\n\nexport const toDataUrl = async (bytes: ByteLike): Promise<string> => {\n  const blob = toBlob(bytes);\n  const reader = new FileReader();\n  return new Promise((resolve, reject) => {\n    const callback = (result: string | ArrayBuffer | undefined | null) => {\n      if (typeof result === \"string\") {\n        return resolve(result);\n      }\n      console.log({ bytes });\n      return reject(\"Unable to convert to data URL\");\n    };\n    reader.onload = function (e) {\n      callback(e.target?.result);\n    };\n    reader.readAsDataURL(blob);\n  });\n};\n"]}