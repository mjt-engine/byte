{"version":3,"file":"addressStringOf.js","sourceRoot":"","sources":["../src/addressStringOf.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAClC,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAElD,MAAM,CAAC,MAAM,eAAe,GAAG,KAAK,EAAE,EACpC,KAAK,EACL,SAAS,GAAG,SAAS,EACrB,KAAK,GAAG,EAAE,GAKX,EAAE,EAAE;IACH,MAAM,KAAK,GAAG,MAAM,MAAM,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC;IACxD,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACnD,OAAO,GAAG,SAAS,IAAI,OAAO,EAAE,CAAC;AACnC,CAAC,CAAC","sourcesContent":["import type { ByteLike } from \"./type/ByteLike\";\nimport type { ADDRESS_ALGORITHM } from \"./ADDRESS_ALGORITHM\";\nimport { hashOf } from \"./hashOf\";\nimport { encodeAsString } from \"./encodeAsString\";\n\nexport const addressStringOf = async ({\n  bytes,\n  algorithm = \"SHA-512\",\n  radix = 16,\n}: {\n  algorithm?: ADDRESS_ALGORITHM;\n  bytes: ByteLike;\n  radix?: number;\n}) => {\n  const idRaw = await hashOf({ bytes: bytes, algorithm });\n  const encoded = await encodeAsString(idRaw, radix);\n  return `${algorithm}:${encoded}`;\n};\n"]}