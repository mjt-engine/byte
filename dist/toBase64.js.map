{"version":3,"file":"toBase64.js","sourceRoot":"","sources":["../src/toBase64.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAC5D,OAAO,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAC;AAClE,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAC5D,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAQhD,MAAM,UAAU,QAAQ,CAAC,KAAe;IACtC,IAAI,mBAAmB,CAAC,KAAK,CAAC,EAAE,CAAC;QAC/B,OAAO,iBAAiB,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IACD,OAAO,gBAAgB,CAAC,KAAK,CAAC,CAAC;AACjC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,gBAAgB,CACpC,KAAuB;IAEvB,MAAM,EAAE,GAAG,MAAM,aAAa,CAAC,KAAK,CAAC,CAAC;IACtC,OAAO,mBAAmB,CAAC,EAAE,CAAC,CAAC;AACjC,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,KAAwB;IACxD,MAAM,EAAE,GAAG,sBAAsB,CAAC,KAAK,CAAC,CAAC;IACzC,OAAO,mBAAmB,CAAC,EAAE,CAAC,CAAC;AACjC,CAAC","sourcesContent":["import { arrayBufferToBase64 } from \"./arrayBufferToBase64\";\nimport { immediateToArrayBuffer } from \"./immediateToArrayBuffer\";\nimport { isImmediateByteLike } from \"./isImmediateByteLike\";\nimport { toArrayBuffer } from \"./toArrayBuffer\";\nimport type { ByteLike } from \"./type/ByteLike\";\nimport type { EventualByteLike } from \"./type/EventualByteLike\";\nimport type { ImmediateByteLike } from \"./type/ImmediateByteLike\";\n\nexport function toBase64(bytes: EventualByteLike): Promise<string>;\nexport function toBase64(bytes: ImmediateByteLike): string;\n\nexport function toBase64(bytes: ByteLike): string | Promise<string> {\n  if (isImmediateByteLike(bytes)) {\n    return immediateToBase64(bytes);\n  }\n  return eventualToBase64(bytes);\n}\n\nexport async function eventualToBase64(\n  bytes: EventualByteLike\n): Promise<string> {\n  const ab = await toArrayBuffer(bytes);\n  return arrayBufferToBase64(ab);\n}\n\nexport function immediateToBase64(bytes: ImmediateByteLike): string {\n  const ab = immediateToArrayBuffer(bytes);\n  return arrayBufferToBase64(ab);\n}\n"]}