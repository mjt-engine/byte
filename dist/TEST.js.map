{"version":3,"file":"TEST.js","sourceRoot":"","sources":["../src/TEST.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AAC7C,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAC;AAClE,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAClD,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAClC,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AACxD,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAElC,wDAAwD;AACxD,MAAM,KAAK,GAAe,EAAE,CAAC;AAE7B,KAAK,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE;IACpB,MAAM,IAAI,GAAG,MAAM,CAAC;IACpB,MAAM,GAAG,GAAG,MAAM,aAAa,CAAC,IAAI,CAAC,CAAC;IACtC,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,CAAC;IACjC,OAAO,OAAO,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC;AACH,KAAK,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE;IACpB,OAAO,cAAc,CAAC,GAAG,CAAC,KAAK,EAAE,SAAS,EAAE,EAAE;QAC5C,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,CAAC;QAC1D,OAAO,OAAO,CAAC,WAAW,CACxB,MAAM,CAAC,UAAU,EACjB,sBAAsB,CAAC,SAAS,CAAC,CAClC,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AACH,KAAK,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE;IACpB,CAAC;QACC,MAAM,MAAM,GAAG,MAAM,eAAe,CAAC;YACnC,KAAK,EAAE,MAAM;YACb,SAAS,EAAE,SAAS;SACrB,CAAC,CAAC;QACH,OAAO,CAAC,WAAW,CACjB,MAAM,EACN,sDAAsD,CACvD,CAAC;IACJ,CAAC;IACD,CAAC;QACC,MAAM,MAAM,GAAG,MAAM,eAAe,CAAC;YACnC,KAAK,EAAE,MAAM;YACb,SAAS,EAAE,SAAS;SACrB,CAAC,CAAC;QACH,OAAO,CAAC,WAAW,CACjB,MAAM,EACN,kGAAkG,CACnG,CAAC;IACJ,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,KAAK,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE;IACpB,OAAO,cAAc,CAAC,GAAG,CAAC,KAAK,EAAE,SAAS,EAAE,EAAE;QAC5C,MAAM,IAAI,GAAG,MAAM,CAAC;QACpB,MAAM,EAAE,GAAG,MAAM,eAAe,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;QAC7D,MAAM,eAAe,GAAG,IAAI,UAAU,CACpC,MAAM,MAAM,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CACzC,CAAC;QACF,MAAM,OAAO,GAAG,iBAAiB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QAC1C,OAAO,OAAO,CAAC,mBAAmB,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,IAAI,GAAG,KAAK,IAAI,EAAE;IAC7B,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAC/B,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;QACvB,IAAI,CAAC;YACH,MAAM,IAAI,EAAE,CAAC;YACb,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACrB,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC,CAAC,CACH,CAAC;IACF,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,EAAE,CAAC;QACrC,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;IAClC,CAAC;IACD,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IAC1B,OAAO,IAAI,CAAC;AACd,CAAC,CAAC","sourcesContent":["import { Asserts } from \"@mjt-engine/assert\";\nimport { addressStringOf } from \"./addressStringOf\";\nimport { ALGORITHM_BYTE_LENGTHS } from \"./ALGORITHM_BYTE_LENGTHS\";\nimport { ALL_ALGORITHMS } from \"./ALL_ALGORITHMS\";\nimport { hashOf } from \"./hashOf\";\nimport { idStringToIdBytes } from \"./idStringToIdBytes\";\nimport { toArrayBuffer } from \"./toArrayBuffer\";\nimport { toText } from \"./toText\";\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst TESTS: Function[] = [];\n\nTESTS.push(async () => {\n  const data = \"test\";\n  const arr = await toArrayBuffer(data);\n  const actual = await toText(arr);\n  return Asserts.assertEqual(data, actual);\n});\nTESTS.push(async () => {\n  return ALL_ALGORITHMS.map(async (algorithm) => {\n    const actual = await hashOf({ bytes: \"test\", algorithm });\n    return Asserts.assertEqual(\n      actual.byteLength,\n      ALGORITHM_BYTE_LENGTHS[algorithm]\n    );\n  });\n});\nTESTS.push(async () => {\n  {\n    const actual = await addressStringOf({\n      bytes: \"test\",\n      algorithm: \"SHA-256\",\n    });\n    Asserts.assertEqual(\n      actual,\n      \"SHA-256:n4bQgYhMfWWaL+qgxVrQFaO/TxsrC4Is0V1sFbDwCgg=\"\n    );\n  }\n  {\n    const actual = await addressStringOf({\n      bytes: \"test\",\n      algorithm: \"SHA-512\",\n    });\n    Asserts.assertEqual(\n      actual,\n      \"SHA-512:7iaw3Ur350mqGo7jwQrpkj9hiYB3Lkc/iBml1JQODbJ6wYX4oOHV+E+IvIh/1nsUNzLDBMxfqa2Ob1f1ACio/w==\"\n    );\n  }\n});\n\nTESTS.push(async () => {\n  return ALL_ALGORITHMS.map(async (algorithm) => {\n    const data = \"test\";\n    const id = await addressStringOf({ bytes: data, algorithm });\n    const idBytesExpected = new Uint8Array(\n      await hashOf({ bytes: data, algorithm })\n    );\n    const idBytes = idStringToIdBytes({ id });\n    return Asserts.assertEqualElements(idBytes, idBytesExpected);\n  });\n});\n\nexport const test = async () => {\n  const results = await Promise.all(\n    TESTS.map(async (test) => {\n      try {\n        await test();\n        return true;\n      } catch (error) {\n        console.error(error);\n        return false;\n      }\n    })\n  );\n  if (results.find((v) => v === false)) {\n    throw new Error(\"TESTS FAILED\");\n  }\n  console.log(\"TESTS PASS\");\n  return true;\n};\n"]}